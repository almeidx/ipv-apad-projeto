import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import psycopg2
from psycopg2 import Error
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta

st.set_page_config(
    page_title="OLAP - Gest√£o de Vendas",
    layout="wide",
    initial_sidebar_state="expanded"
)

# @st.cache_resource
def init_connection():
    try:
        conn = psycopg2.connect(
            host="localhost",
            port="5432",
            database="datamart",
            user="postgres",
            password="password",
        )
        # Verify connection is successful
        if conn:
            st.sidebar.success("‚úÖ Database connected")
        return conn
    except Error as e:
        st.sidebar.error(f"‚ùå Database connection error: {e}")
        return None

# @st.cache_data
def run_query(query):
    conn = init_connection()
    if conn:
        try:
            with conn.cursor() as cur:
                # Print query for debugging
                print(f"Executing query: {query}")
                cur.execute(query)
                results = cur.fetchall()
                if results:
                    st.sidebar.success(f"‚úÖ Query returned {len(results)} rows")
                else:
                    st.sidebar.warning("‚ö†Ô∏è Query returned no data")
                return results
        except Error as e:
            st.sidebar.error(f"‚ùå Query error: {e}")
            return None
        finally:
            conn.close()
    return None

st.markdown("<h1>üìä OLAP - Gest√£o de Vendas</h1>", unsafe_allow_html=True)

st.sidebar.title("üìå Menu")
opcao = st.sidebar.radio("Seleciona a op√ß√£o:", [
    "üè¨ Vendas por Loja",
    "üìÑ Vendas por Tipos de Documento",
    "üì¶ Vendas por Produtos",
    "üë• Vendas por Clientes",
    "üìÖ Vendas por Datas",
    "üîç Vis√£o Anal√≠tica"
])

# Common date filter for all views
st.sidebar.markdown("---")
st.sidebar.header("Filtros de Data")

# Default to last 12 months
default_end_date = datetime.now()
default_start_date = default_end_date - timedelta(days=365)

start_date = st.sidebar.date_input("Data Inicial", value=default_start_date)
end_date = st.sidebar.date_input("Data Final", value=default_end_date)

# Get date IDs for filtering
if start_date and end_date:
    date_filter_query = f"""
    SELECT MIN(id), MAX(id) FROM d_dates
    WHERE (year > {start_date.year} OR (year = {start_date.year} AND month > {start_date.month})
           OR (year = {start_date.year} AND month = {start_date.month} AND day >= {start_date.day}))
    AND (year < {end_date.year} OR (year = {end_date.year} AND month < {end_date.month})
         OR (year = {end_date.year} AND month = {end_date.month} AND day <= {end_date.day}))
    """
    date_ids = run_query(date_filter_query)
    if date_ids and date_ids[0][0] is not None:
        min_date_id, max_date_id = date_ids[0]
        date_filter = f"AND s.date_id BETWEEN {min_date_id} AND {max_date_id}"
    else:
        date_filter = ""
else:
    date_filter = ""

# Function to convert query results to DataFrame
def to_dataframe(data, columns):
    if data:
        return pd.DataFrame(data, columns=columns)
    return pd.DataFrame()

if opcao == "üè¨ Vendas por Loja":
    st.header("An√°lise de Vendas por Loja")

    # Query para vendas por loja
    query = f"""
    SELECT st.name, st.location, SUM(s.total_amount) as total_sales, COUNT(s.id) as num_transactions
    FROM sales s
    JOIN d_stores st ON s.store_id = st.id
    WHERE 1=1 {date_filter}
    GROUP BY st.name, st.location
    ORDER BY total_sales DESC
    """

    results = run_query(query)
    df = to_dataframe(results, ["Loja", "Localiza√ß√£o", "Total Vendas", "N√∫mero de Transa√ß√µes"])

    if not df.empty:
        col1, col2 = st.columns(2)

        with col1:
            # Gr√°fico de barras para total de vendas por loja
            fig1 = px.bar(
                df,
                x="Loja",
                y="Total Vendas",
                title="Total de Vendas por Loja",
                text="Total Vendas",
                color="Loja",
                labels={"Total Vendas": "Montante Total (‚Ç¨)"}
            )
            fig1.update_traces(texttemplate='%{text:.2f} ‚Ç¨', textposition='outside')
            st.plotly_chart(fig1, use_container_width=True)

        with col2:
            # Mapa de calor para n√∫mero de transa√ß√µes
            fig2 = px.scatter(
                df,
                x="Loja",
                y="N√∫mero de Transa√ß√µes",
                size="Total Vendas",
                color="Loja",
                title="N√∫mero de Transa√ß√µes por Loja",
                hover_data=["Localiza√ß√£o"]
            )
            st.plotly_chart(fig2, use_container_width=True)

        # Tabela com os dados
        st.subheader("Detalhes por Loja")
        st.dataframe(df.style.format({"Total Vendas": "{:.2f} ‚Ç¨"}))
    else:
        st.info("Sem dados para exibir. Tente ajustar os filtros.")

elif opcao == "üìÑ Vendas por Tipos de Documento":
    st.header("An√°lise de Vendas por Tipo de Documento")

    # Query para vendas por tipo de documento
    query = f"""
    SELECT dt.name, SUM(s.total_amount) as total_sales, COUNT(s.id) as num_transactions
    FROM sales s
    JOIN d_document_types dt ON s.document_type_id = dt.id
    WHERE 1=1 {date_filter}
    GROUP BY dt.name
    ORDER BY total_sales DESC
    """

    results = run_query(query)
    df = to_dataframe(results, ["Tipo de Documento", "Total Vendas", "N√∫mero de Transa√ß√µes"])

    if not df.empty:
        col1, col2 = st.columns(2)

        with col1:
            # Gr√°fico de pizza para propor√ß√£o de vendas por tipo de documento
            fig1 = px.pie(
                df,
                values="Total Vendas",
                names="Tipo de Documento",
                title="Distribui√ß√£o de Vendas por Tipo de Documento",
                hole=0.4
            )
            fig1.update_traces(textinfo="percent+label")
            st.plotly_chart(fig1, use_container_width=True)

        with col2:
            # Gr√°fico de barras para n√∫mero de transa√ß√µes
            fig2 = px.bar(
                df,
                x="Tipo de Documento",
                y="N√∫mero de Transa√ß√µes",
                title="N√∫mero de Transa√ß√µes por Tipo de Documento",
                color="Tipo de Documento",
                text="N√∫mero de Transa√ß√µes"
            )
            fig2.update_traces(texttemplate='%{text}', textposition='outside')
            st.plotly_chart(fig2, use_container_width=True)

        # Tabela com os dados
        st.subheader("Detalhes por Tipo de Documento")
        st.dataframe(df.style.format({"Total Vendas": "{:.2f} ‚Ç¨"}))
    else:
        st.info("Sem dados para exibir. Tente ajustar os filtros.")

elif opcao == "üì¶ Vendas por Produtos":
    st.header("An√°lise de Vendas por Produtos")

    # Filtro opcional para limitar n√∫mero de produtos
    top_n = st.slider("Mostrar Top N Produtos", min_value=5, max_value=50, value=10)

    # Query para vendas por produto
    query = f"""
    SELECT p.name, p.sku, p.material,
           SUM(s.total_amount) as total_sales,
           SUM(s.quantity) as total_quantity,
           AVG(s.unit_price) as avg_price
    FROM sales s
    JOIN d_products p ON s.product_id = p.id
    WHERE 1=1 {date_filter}
    GROUP BY p.name, p.sku, p.material
    ORDER BY total_sales DESC
    LIMIT {top_n}
    """

    results = run_query(query)
    df = to_dataframe(results, ["Produto", "SKU", "Material", "Total Vendas", "Quantidade Vendida", "Pre√ßo M√©dio"])

    if not df.empty:
        col1, col2 = st.columns(2)

        with col1:
            # Gr√°fico de barras horizontal para os produtos mais vendidos
            fig1 = px.bar(
                df.sort_values("Total Vendas"),
                y="Produto",
                x="Total Vendas",
                title=f"Top {top_n} Produtos por Valor de Vendas",
                orientation="h",
                color="Total Vendas",
                text="Total Vendas",
                labels={"Total Vendas": "Montante Total (‚Ç¨)"}
            )
            fig1.update_traces(texttemplate='%{text:.2f} ‚Ç¨', textposition='outside')
            st.plotly_chart(fig1, use_container_width=True)

        with col2:
            # Gr√°fico de dispers√£o para rela√ß√£o quantidade vs valor
            fig2 = px.scatter(
                df,
                x="Pre√ßo M√©dio",
                y="Quantidade Vendida",
                size="Total Vendas",
                color="Material" if df["Material"].notna().any() else None,
                hover_name="Produto",
                title="Rela√ß√£o entre Pre√ßo M√©dio e Quantidade Vendida",
                labels={"Pre√ßo M√©dio": "Pre√ßo M√©dio (‚Ç¨)"}
            )
            st.plotly_chart(fig2, use_container_width=True)

        # Tabela com os dados
        st.subheader("Detalhes por Produto")
        st.dataframe(df.style.format({
            "Total Vendas": "{:.2f} ‚Ç¨",
            "Pre√ßo M√©dio": "{:.2f} ‚Ç¨"
        }))
    else:
        st.info("Sem dados para exibir. Tente ajustar os filtros.")

elif opcao == "üë• Vendas por Clientes":
    st.header("An√°lise de Vendas por Clientes")

    # Filtro opcional para limitar n√∫mero de clientes
    top_n = st.slider("Mostrar Top N Clientes", min_value=5, max_value=50, value=10)

    # Query para vendas por cliente
    query = f"""
    SELECT c.name, c.email, SUM(s.total_amount) as total_sales,
           COUNT(DISTINCT s.id) as num_transactions,
           AVG(s.total_amount) as avg_transaction_value
    FROM sales s
    JOIN d_customers c ON s.customer_id = c.id
    WHERE 1=1 {date_filter}
    GROUP BY c.name, c.email
    ORDER BY total_sales DESC
    LIMIT {top_n}
    """

    results = run_query(query)
    df = to_dataframe(results, ["Cliente", "Email", "Total Compras", "N√∫mero Transa√ß√µes", "Valor M√©dio"])

    if not df.empty:
        col1, col2 = st.columns(2)

        with col1:
            # Gr√°fico de barras dos principais clientes
            fig1 = px.bar(
                df.sort_values("Total Compras", ascending=False).head(10),
                x="Cliente",
                y="Total Compras",
                title=f"Top {top_n} Clientes por Valor de Compras",
                color="Total Compras",
                text="Total Compras",
                labels={"Total Compras": "Montante Total (‚Ç¨)"}
            )
            fig1.update_layout(xaxis={'categoryorder':'total descending'})
            fig1.update_traces(texttemplate='%{text:.2f} ‚Ç¨', textposition='outside')
            # fig1.update_xaxis(tickangle=45)
            st.plotly_chart(fig1, use_container_width=True)

        with col2:
            # Gr√°fico de dispers√£o para frequ√™ncia vs valor m√©dio
            fig2 = px.scatter(
                df,
                x="N√∫mero Transa√ß√µes",
                y="Valor M√©dio",
                size="Total Compras",
                hover_name="Cliente",
                title="Frequ√™ncia vs Valor M√©dio por Cliente",
                labels={"Valor M√©dio": "Valor M√©dio por Transa√ß√£o (‚Ç¨)"}
            )
            st.plotly_chart(fig2, use_container_width=True)

        # Tabela com os dados
        st.subheader("Detalhes por Cliente")
        # Mask email for privacy
        df["Email"] = df["Email"].apply(lambda x: x.split("@")[0][:3] + "***@" + x.split("@")[1])
        st.dataframe(df.style.format({
            "Total Compras": "{:.2f} ‚Ç¨",
            "Valor M√©dio": "{:.2f} ‚Ç¨"
        }))
    else:
        st.info("Sem dados para exibir. Tente ajustar os filtros.")

elif opcao == "üìÖ Vendas por Datas":
    st.header("An√°lise de Vendas por Per√≠odo")

    # Selecionar granularidade
    granularity = st.radio("Selecione a Granularidade", ["Di√°rio", "Mensal", "Anual"])

    # Construir a query com base na granularidade
    time_group = ""
    if granularity == "Di√°rio":
        time_group = "d.year, d.month, d.day"
        time_format = "TO_CHAR(MAKE_DATE(d.year, d.month, d.day), 'DD/MM/YYYY') as period"
        sort = "d.year, d.month, d.day"
    elif granularity == "Mensal":
        time_group = "d.year, d.month"
        time_format = "TO_CHAR(MAKE_DATE(d.year, d.month, 1), 'MM/YYYY') as period"
        sort = "d.year, d.month"
    else:  # Anual
        time_group = "d.year"
        time_format = "d.year::text as period"
        sort = "d.year"

    # Query para vendas por data
    query = f"""
    SELECT {time_format}, SUM(s.total_amount) as total_sales,
           COUNT(s.id) as num_transactions,
           AVG(s.total_amount) as avg_transaction_value
    FROM sales s
    JOIN d_dates d ON s.date_id = d.id
    WHERE 1=1 {date_filter}
    GROUP BY {time_group}
    ORDER BY {sort}
    """

    results = run_query(query)
    df = to_dataframe(results, ["Per√≠odo", "Total Vendas", "N√∫mero Transa√ß√µes", "Valor M√©dio"])

    if not df.empty:
        col1, col2 = st.columns(2)

        with col1:
            # Gr√°fico de linha para evolu√ß√£o das vendas ao longo do tempo
            fig1 = px.line(
                df,
                x="Per√≠odo",
                y="Total Vendas",
                title=f"Evolu√ß√£o de Vendas ({granularity})",
                markers=True,
                labels={"Total Vendas": "Montante Total (‚Ç¨)"}
            )
            st.plotly_chart(fig1, use_container_width=True)

        with col2:
            # Gr√°fico de barras para n√∫mero de transa√ß√µes
            fig2 = px.bar(
                df,
                x="Per√≠odo",
                y="N√∫mero Transa√ß√µes",
                title=f"N√∫mero de Transa√ß√µes ({granularity})",
                color="Valor M√©dio",
                labels={"N√∫mero Transa√ß√µes": "Quantidade", "Valor M√©dio": "Valor M√©dio (‚Ç¨)"}
            )
            st.plotly_chart(fig2, use_container_width=True)

        # M√©tricas de resumo
        total_period = df["Total Vendas"].sum()
        avg_period = df["Total Vendas"].mean()
        max_period = df["Total Vendas"].max()
        max_period_time = df.loc[df["Total Vendas"].idxmax()]["Per√≠odo"]

        col1, col2, col3 = st.columns(3)
        col1.metric("Total de Vendas no Per√≠odo", f"{total_period:.2f} ‚Ç¨")
        col2.metric(f"M√©dia de Vendas por {granularity if granularity != 'Mensal' else 'M√™s'}", f"{avg_period:.2f} ‚Ç¨")
        col3.metric(f"Melhor {granularity if granularity != 'Mensal' else 'M√™s'}", f"{max_period:.2f} ‚Ç¨ ({max_period_time})")

        # Tabela com os dados
        st.subheader(f"Detalhes por {granularity}")
        st.dataframe(df.style.format({
            "Total Vendas": "{:.2f} ‚Ç¨",
            "Valor M√©dio": "{:.2f} ‚Ç¨"
        }))
    else:
        st.info("Sem dados para exibir. Tente ajustar os filtros.")

elif opcao == "üîç Vis√£o Anal√≠tica":
    st.header("Vis√£o Anal√≠tica Multidimensional")

    # Permitir ao usu√°rio selecionar dimens√µes
    col1, col2 = st.columns(2)

    with col1:
        dim1 = st.selectbox(
            "Dimens√£o Prim√°ria",
            ["Loja", "Produto", "Cliente", "Tipo de Documento", "Data (M√™s)", "Data (Ano)"]
        )

    with col2:
        dim2 = st.selectbox(
            "Dimens√£o Secund√°ria (opcional)",
            ["Nenhuma", "Loja", "Produto", "Cliente", "Tipo de Documento", "Data (M√™s)", "Data (Ano)"],
            index=0
        )

    # Mapear sele√ß√£o para par√¢metros da consulta
    dim_map = {
        "Loja": ("st.name", "d_stores st ON s.store_id = st.id"),
        "Produto": ("p.name", "d_products p ON s.product_id = p.id"),
        "Cliente": ("c.name", "d_customers c ON s.customer_id = c.id"),
        "Tipo de Documento": ("dt.name", "d_document_types dt ON s.document_type_id = dt.id"),
        "Data (M√™s)": ("TO_CHAR(MAKE_DATE(d.year, d.month, 1), 'MM/YYYY')", "d_dates d ON s.date_id = d.id"),
        "Data (Ano)": ("d.year::text", "d_dates d ON s.date_id = d.id")
    }

    # Construir query dinamicamente
    select_dim1 = dim_map[dim1][0] + " as dim1"
    join_dim1 = dim_map[dim1][1]

    if dim2 != "Nenhuma" and dim2 != dim1:
        select_dim2 = ", " + dim_map[dim2][0] + " as dim2"
        join_dim2 = dim_map[dim2][1] if dim_map[dim2][1] not in join_dim1 else ""
        group_by = "dim1, dim2"
        order_by = "total_sales DESC, dim1, dim2"
    else:
        select_dim2 = ""
        join_dim2 = ""
        group_by = "dim1"
        order_by = "total_sales DESC, dim1"

    # Ajustar joins para evitar duplica√ß√µes
    joins = f"""
    JOIN {join_dim1}
    {f'JOIN {join_dim2}' if join_dim2 else ''}
    """

    # Query final para an√°lise multidimensional
    query = f"""
    SELECT {select_dim1}{select_dim2},
           SUM(s.total_amount) as total_sales,
           COUNT(s.id) as num_transactions,
           AVG(s.total_amount) as avg_transaction_value,
           SUM(s.quantity) as total_quantity
    FROM sales s
    {joins}
    WHERE 1=1 {date_filter}
    GROUP BY {group_by}
    ORDER BY {order_by}
    LIMIT 100
    """

    results = run_query(query)

    if dim2 != "Nenhuma" and dim2 != dim1:
        df = to_dataframe(results, [dim1, dim2, "Total Vendas", "Num. Transa√ß√µes", "Valor M√©dio", "Quantidade"])
    else:
        df = to_dataframe(results, [dim1, "Total Vendas", "Num. Transa√ß√µes", "Valor M√©dio", "Quantidade"])

    if not df.empty:
        # Visualiza√ß√µes baseadas nas dimens√µes selecionadas
        if dim2 != "Nenhuma" and dim2 != dim1:
            # Gr√°fico de calor para duas dimens√µes
            fig1 = px.treemap(
                df,
                path=[dim1, dim2],
                values="Total Vendas",
                color="Total Vendas",
                title=f"An√°lise de Vendas por {dim1} e {dim2}",
                hover_data=["Num. Transa√ß√µes", "Quantidade"]
            )
            st.plotly_chart(fig1, use_container_width=True)

            # Tabela pivotada
            pivot_df = df.pivot_table(
                index=dim1,
                columns=dim2,
                values="Total Vendas",
                aggfunc="sum",
                fill_value=0
            )

            st.subheader(f"Tabela Piv√¥: {dim1} vs {dim2}")
            st.dataframe(pivot_df.style.background_gradient(cmap="Blues").format("{:.2f} ‚Ç¨"))

        else:
            # Gr√°fico de barras para uma dimens√£o
            fig1 = px.bar(
                df.sort_values("Total Vendas", ascending=False).head(15),
                x=dim1,
                y="Total Vendas",
                title=f"An√°lise de Vendas por {dim1}",
                color="Total Vendas",
                text="Total Vendas",
                labels={"Total Vendas": "Montante Total (‚Ç¨)"}
            )
            fig1.update_layout(xaxis={'categoryorder':'total descending'})
            fig1.update_traces(texttemplate='%{text:.2f} ‚Ç¨', textposition='outside')
            # fig1.update_xaxis(tickangle=45)
            st.plotly_chart(fig1, use_container_width=True)

        # Resumo estat√≠stico
        st.subheader("Resumo Estat√≠stico")
        st.dataframe(df.describe().style.format("{:.2f}"))

        # Download de dados
        csv = df.to_csv(index=False).encode('utf-8')
        st.download_button(
            "Baixar Dados (CSV)",
            data=csv,
            file_name=f"analise_{dim1.lower()}_{dim2.lower() if dim2 != 'Nenhuma' else 'sem_dim2'}.csv",
            mime='text/csv',
        )
    else:
        st.info("Sem dados para exibir. Tente ajustar os filtros.")

# Adicionar informa√ß√£o de rodap√©
st.markdown("---")
st.markdown(
    """
    <div style='text-align: center; color: gray; font-size: 14px;'>
        OLAP - Gest√£o de Vendas | Desenvolvido com Streamlit | Dados em PostgreSQL
    </div>
    """,
    unsafe_allow_html=True
)
